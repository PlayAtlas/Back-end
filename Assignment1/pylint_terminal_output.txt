Last login: Sun Oct 17 00:35:46 on console
playatlas@MacBook-Pro-Rinat ~ % cd Documents 
playatlas@MacBook-Pro-Rinat Documents % cd Python_Back 
playatlas@MacBook-Pro-Rinat Python_Back % ls
git-Python_Back	test.py		unit тесты
playatlas@MacBook-Pro-Rinat Python_Back % cd git-Python_Back 
playatlas@MacBook-Pro-Rinat git-Python_Back % ls
Assignment1	notes.txt
playatlas@MacBook-Pro-Rinat git-Python_Back % git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
playatlas@MacBook-Pro-Rinat git-Python_Back % pylint --version
PYLINTHOME is now '/Users/playatlas/Library/Caches/pylint' but obsolescent '/Users/playatlas/.pylint.d' is found; you can safely remove the latter
pylint 2.11.1
astroid 2.8.2
Python 3.7.6 (default, Dec 30 2019, 19:38:26) 
[Clang 11.0.0 (clang-1100.0.33.16)]
playatlas@MacBook-Pro-Rinat git-Python_Back % ls
Assignment1	notes.txt
playatlas@MacBook-Pro-Rinat git-Python_Back % cd Assignment1
playatlas@MacBook-Pro-Rinat Assignment1 % ls
TicTacToe.py		test_TicTacToe.py
playatlas@MacBook-Pro-Rinat Assignment1 % cat TicTacToe.py 
class TicTacToe:
	grid = list()
	count = dict()
	player = 'X'
	def show_board(self):
		print('---------')
		for i in range(3):
			print('| ', end='')
			for j in range(3):
				print(self.grid[j + 3*i] + ' ', end='')
			print('|')
		print('---------')

	def validate_input(self, inp):
		coordinates = inp.split()
		if len(coordinates) != 2 :
			print('Enter two numbers divided by one space')
			return False
		x = int(coordinates[0]) - 1
		y = int(coordinates[1]) - 1
		if x > 2 or x < 0 or y > 2 or y < 0:
			print('Coordinates should be from 1 to 3!')
		if self.grid[y*3 + x] == 'X' or self.grid[y*3 + x] == 'O':
			print('This cell is occupied! Choose another one!')
			return False
		return True

	def start_game(self):
		self.grid = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']
		self.count = {'X': 0, 'O': 0, ' ': 0}
		while True:
			self.show_board()
			# validating input
			play = input('Enter the coordinates:')
			while self.validate_input(play) != True:
				play = input('Enter the coordinates:')
			# pulling coords out of input
			coordinates = play.split()
			x = int(coordinates[0]) - 1
			y = int(coordinates[1]) - 1
			# making the play
			self.grid[y*3+x] = self.player
			self.count[self.player] += 1
			# checking if the game is finished
			if self.check_winner() != 0:
				break
			# switching player
			if self.player == 'X':
				self.player = 'O'
			else:
				self.player = 'X'



	def check_winner(s):
		winner = 0
		if s.grid[0] == s.grid[4] == s.grid[8] != ' ':
			winner = s.grid[0]
		elif s.grid[2] == s.grid[4] == s.grid[6] != ' ':
			winner = s.grid[2]
		else:
			for i in range(3):
				if s.grid[i*3] == s.grid[i*3+1] == s.grid[i*3+2] != ' ' or s.grid[i] == s.grid[i+3] == s.grid[i+6] != ' ':
					if winner == 0:
						winner = s.grid[i*3]
		if winner == 0 and s.count['X'] + s.count['O'] == 9:
			print('Draw')
			return True
		elif winner != 0:
			s.show_board()
			print(winner, 'wins')
			return True
		else:
			return 0


if __name__ == '__main__':
	game = TicTacToe()
	game.start_game()
	
playatlas@MacBook-Pro-Rinat Assignment1 % pylint
Usage: pylint [options]

Options:
  -h, --help            show this help message and exit
  --long-help           more verbose help.

  Master:
    --init-hook=<code>  Python code to execute, usually for sys.path
                        manipulation such as pygtk.require().
    -E, --errors-only   In error mode, checkers without error messages are
                        disabled and for others, only the ERROR messages are
                        displayed, and no reports are done by default.
    -v, --verbose       In verbose mode, extra non-checker-related info will
                        be displayed.
    --ignore=<file>[,<file>...]
                        Files or directories to be skipped. They should be
                        base names, not paths. [current: CVS]
    --ignore-patterns=<pattern>[,<pattern>...]
                        Files or directories matching the regex patterns are
                        skipped. The regex matches against base names, not
                        paths. [current: none]
    --ignore-paths=<pattern>[,<pattern>...]
                        Add files or directories matching the regex patterns
                        to the ignore-list. The regex matches against paths.
                        [current: none]
    --persistent=<y_or_n>
                        Pickle collected data for later comparisons. [current:
                        yes]
    --load-plugins=<modules>
                        List of plugins (as comma separated values of python
                        module names) to load, usually to register additional
                        checkers. [current: none]
    --fail-under=<score>
                        Specify a score threshold to be exceeded before
                        program exits with error. [current: 10.0]
    --fail-on=<msg ids>
                        Return non-zero exit code if any of these
                        messages/categories are detected, even if score is
                        above --fail-under value. Syntax same as enable.
                        Messages specified are enabled, while categories only
                        check already-enabled messages. [current: none]
    -j <n-processes>, --jobs=<n-processes>
                        Use multiple processes to speed up Pylint. Specifying
                        0 will auto-detect the number of processors available
                        to use. [current: 1]
    --limit-inference-results=<number-of-results>
                        Control the amount of potential inferred values when
                        inferring a single object. This can help the
                        performance when dealing with large functions or
                        complex, nested conditions.  [current: 100]
    --extension-pkg-allow-list=<pkg[,pkg]>
                        A comma-separated list of package or module names from
                        where C extensions may be loaded. Extensions are
                        loading into the active Python interpreter and may run
                        arbitrary code. [current: none]
    --extension-pkg-whitelist=<pkg[,pkg]>
                        A comma-separated list of package or module names from
                        where C extensions may be loaded. Extensions are
                        loading into the active Python interpreter and may run
                        arbitrary code. (This is an alternative name to
                        extension-pkg-allow-list for backward compatibility.)
                        [current: none]
    --suggestion-mode=<yn>
                        When enabled, pylint would attempt to guess common
                        misconfiguration and emit user-friendly hints instead
                        of false-positive error messages. [current: yes]
    --exit-zero         Always return a 0 (non-error) status code, even if
                        lint errors are found. This is primarily useful in
                        continuous integration scripts.
    --from-stdin        Interpret the stdin as a python script, whose filename
                        needs to be passed as the module_or_package argument.
    --py-version=<py_version>
                        Min Python version to use for version dependend
                        checks. Will default to the version used to run
                        pylint. [current: 3.7]

  Commands:
    --rcfile=<file>     Specify a configuration file to load.
    --output=<file>     Specify an output file.
    --help-msg=<msg-id>
                        Display a help message for the given message id and
                        exit. The value may be a comma separated list of
                        message ids.
    --list-msgs         Display a list of all pylint's messages divided by
                        whether they are emittable with the given interpreter.
    --list-msgs-enabled
                        Display a list of what messages are enabled, disabled
                        and non-emittable with the given configuration.
    --list-groups       List pylint's message groups.
    --list-conf-levels  Generate pylint's confidence levels.
    --list-extensions   List available extensions.
    --full-documentation
                        Generate pylint's full documentation.
    --generate-rcfile   Generate a sample configuration file according to the
                        current configuration. You can put other options
                        before this one to get them in the generated
                        configuration.

  Messages control:
    --confidence=<levels>
                        Only show warnings with the listed confidence levels.
                        Leave empty to show all. Valid levels: HIGH,
                        INFERENCE, INFERENCE_FAILURE, UNDEFINED. [current:
                        none]
    -e <msg ids>, --enable=<msg ids>
                        Enable the message, report, category or checker with
                        the given id(s). You can either give multiple
                        identifier separated by comma (,) or put this option
                        multiple time (only on the command line, not in the
                        configuration file where it should appear only once).
                        See also the "--disable" option for examples.
    -d <msg ids>, --disable=<msg ids>
                        Disable the message, report, category or checker with
                        the given id(s). You can either give multiple
                        identifiers separated by comma (,) or put this option
                        multiple times (only on the command line, not in the
                        configuration file where it should appear only once).
                        You can also use "--disable=all" to disable everything
                        first and then reenable specific checks. For example,
                        if you want to run only the similarities checker, you
                        can use "--disable=all --enable=similarities". If you
                        want to run only the classes checker, but have no
                        Warning level messages displayed, use "--disable=all
                        --enable=classes --disable=W".

  Reports:
    -f <format>, --output-format=<format>
                        Set the output format. Available formats are text,
                        parseable, colorized, json and msvs (visual studio).
                        You can also give a reporter class, e.g.
                        mypackage.mymodule.MyReporterClass. [current: text]
    -r <y_or_n>, --reports=<y_or_n>
                        Tells whether to display a full report or only the
                        messages. [current: no]
    --evaluation=<python_expression>
                        Python expression which should return a score less
                        than or equal to 10. You have access to the variables
                        'error', 'warning', 'refactor', and 'convention' which
                        contain the number of messages in each category, as
                        well as 'statement' which is the total number of
                        statements analyzed. This score is used by the global
                        evaluation report (RP0004). [current: 10.0 - ((float(5
                        * error + warning + refactor + convention) /
                        statement) * 10)]
    -s <y_or_n>, --score=<y_or_n>
                        Activate the evaluation score. [current: yes]
    --msg-template=<template>
                        Template used to display messages. This is a python
                        new-style format string used to format the message
                        information. See doc for all details.

playatlas@MacBook-Pro-Rinat Assignment1 % pylint TicTacToe.py 
************* Module TicTacToe
TicTacToe.py:2:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:3:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:4:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:5:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:6:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:7:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:8:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:9:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:10:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
TicTacToe.py:11:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:12:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:14:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:15:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:16:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:17:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:18:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:19:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:20:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:21:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:22:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:23:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:24:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:25:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:26:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:28:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:29:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:30:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:31:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:32:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:34:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:35:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:36:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
TicTacToe.py:38:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:39:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:40:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:42:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:43:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:45:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:46:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
TicTacToe.py:48:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:49:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
TicTacToe.py:50:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:51:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
TicTacToe.py:55:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:56:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:57:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:58:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:59:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:60:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:61:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:62:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:63:0: C0301: Line too long (110/100) (line-too-long)
TicTacToe.py:63:0: W0311: Bad indentation. Found 4 spaces, expected 16 (bad-indentation)
TicTacToe.py:64:0: W0311: Bad indentation. Found 5 spaces, expected 20 (bad-indentation)
TicTacToe.py:65:0: W0311: Bad indentation. Found 6 spaces, expected 24 (bad-indentation)
TicTacToe.py:66:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:67:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:68:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:69:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:70:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:71:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:72:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:73:0: W0311: Bad indentation. Found 2 spaces, expected 8 (bad-indentation)
TicTacToe.py:74:0: W0311: Bad indentation. Found 3 spaces, expected 12 (bad-indentation)
TicTacToe.py:78:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:79:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
TicTacToe.py:80:0: C0303: Trailing whitespace (trailing-whitespace)
TicTacToe.py:1:0: C0103: Module name "TicTacToe" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:1:0: C0114: Missing module docstring (missing-module-docstring)
TicTacToe.py:1:0: C0115: Missing class docstring (missing-class-docstring)
TicTacToe.py:2:8: R1734: Consider using [] instead of list() (use-list-literal)
TicTacToe.py:3:9: R1735: Consider using {} instead of dict() (use-dict-literal)
TicTacToe.py:5:1: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:14:1: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:19:2: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:20:2: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:28:1: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:35:9: C0121: Comparison 'self.validate_input(play) != True' should be 'self.validate_input(play) is not True' if checking for the singleton value True, or 'not self.validate_input(play)' if testing for falsiness (singleton-comparison)
TicTacToe.py:39:3: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:40:3: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:55:1: C0103: Argument name "s" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:55:1: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:55:1: E0213: Method should have "self" as first argument (no-self-argument)
TicTacToe.py:66:2: R1705: Unnecessary "elif" after "return" (no-else-return)

------------------------------------
Your code has been rated at -3.75/10

playatlas@MacBook-Pro-Rinat Assignment1 % pylint TicTacToe.py
************* Module TicTacToe
TicTacToe.py:62:0: C0301: Line too long (122/100) (line-too-long)
TicTacToe.py:1:0: C0103: Module name "TicTacToe" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:1:0: C0114: Missing module docstring (missing-module-docstring)
TicTacToe.py:1:0: C0115: Missing class docstring (missing-class-docstring)
TicTacToe.py:2:11: R1734: Consider using [] instead of list() (use-list-literal)
TicTacToe.py:3:12: R1735: Consider using {} instead of dict() (use-dict-literal)
TicTacToe.py:6:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:15:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:20:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:21:8: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:29:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:36:18: C0121: Comparison 'self.validate_input(play) != True' should be 'self.validate_input(play) is not True' if checking for the singleton value True, or 'not self.validate_input(play)' if testing for falsiness (singleton-comparison)
TicTacToe.py:40:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:41:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:54:4: C0103: Argument name "s" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:54:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:54:4: E0213: Method should have "self" as first argument (no-self-argument)
TicTacToe.py:65:8: R1705: Unnecessary "elif" after "return" (no-else-return)

--------------------------------------------------------------------
Your code has been rated at 6.56/10 (previous run: -3.75/10, +10.31)

playatlas@MacBook-Pro-Rinat Assignment1 % pylint TicTacToe.py
************* Module TicTacToe
TicTacToe.py:62:72: C0303: Trailing whitespace (trailing-whitespace)
TicTacToe.py:1:0: C0103: Module name "TicTacToe" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:1:0: C0114: Missing module docstring (missing-module-docstring)
TicTacToe.py:1:0: C0115: Missing class docstring (missing-class-docstring)
TicTacToe.py:2:11: R1734: Consider using [] instead of list() (use-list-literal)
TicTacToe.py:3:12: R1735: Consider using {} instead of dict() (use-dict-literal)
TicTacToe.py:6:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:15:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:20:8: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:21:8: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:29:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:36:18: C0121: Comparison 'self.validate_input(play) != True' should be 'self.validate_input(play) is not True' if checking for the singleton value True, or 'not self.validate_input(play)' if testing for falsiness (singleton-comparison)
TicTacToe.py:40:12: C0103: Variable name "x" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:41:12: C0103: Variable name "y" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:54:4: C0103: Argument name "s" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:54:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:54:4: E0213: Method should have "self" as first argument (no-self-argument)
TicTacToe.py:66:8: R1705: Unnecessary "elif" after "return" (no-else-return)

------------------------------------------------------------------
Your code has been rated at 6.56/10 (previous run: 6.56/10, +0.00)

playatlas@MacBook-Pro-Rinat Assignment1 % pylint TicTacToe.py
************* Module TicTacToe
TicTacToe.py:62:81: C0303: Trailing whitespace (trailing-whitespace)
TicTacToe.py:1:0: C0103: Module name "TicTacToe" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:1:0: C0114: Missing module docstring (missing-module-docstring)
TicTacToe.py:1:0: C0115: Missing class docstring (missing-class-docstring)
TicTacToe.py:2:11: R1734: Consider using [] instead of list() (use-list-literal)
TicTacToe.py:3:12: R1735: Consider using {} instead of dict() (use-dict-literal)
TicTacToe.py:6:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:15:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:29:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:36:18: C0121: Comparison 'self.validate_input(play) != True' should be 'self.validate_input(play) is not True' if checking for the singleton value True, or 'not self.validate_input(play)' if testing for falsiness (singleton-comparison)
TicTacToe.py:54:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:66:8: R1705: Unnecessary "elif" after "return" (no-else-return)

------------------------------------------------------------------
Your code has been rated at 8.12/10 (previous run: 6.56/10, +1.56)

playatlas@MacBook-Pro-Rinat Assignment1 % pylint TicTacToe.py
************* Module TicTacToe
TicTacToe.py:1:0: C0103: Module name "TicTacToe" doesn't conform to snake_case naming style (invalid-name)
TicTacToe.py:1:0: C0114: Missing module docstring (missing-module-docstring)
TicTacToe.py:1:0: C0115: Missing class docstring (missing-class-docstring)
TicTacToe.py:6:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:15:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:29:4: C0116: Missing function or method docstring (missing-function-docstring)
TicTacToe.py:54:4: C0116: Missing function or method docstring (missing-function-docstring)

------------------------------------------------------------------
Your code has been rated at 8.91/10 (previous run: 8.12/10, +0.78)

playatlas@MacBook-Pro-Rinat Assignment1 % pylint tictactoe.py
************* Module tictactoe
tictactoe.py:4:0: C0115: Missing class docstring (missing-class-docstring)
tictactoe.py:9:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:18:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:32:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:57:4: C0116: Missing function or method docstring (missing-function-docstring)

------------------------------------------------------------------
Your code has been rated at 9.22/10 (previous run: 9.06/10, +0.16)

playatlas@MacBook-Pro-Rinat Assignment1 % pylint tictactoe.py
************* Module tictactoe
tictactoe.py:4:0: C0115: Missing class docstring (missing-class-docstring)
tictactoe.py:9:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:18:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:19:11: C0123: Use isinstance() rather than type() for a typecheck. (unidiomatic-typecheck)
tictactoe.py:36:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:61:4: C0116: Missing function or method docstring (missing-function-docstring)

------------------------------------------------------------------
Your code has been rated at 9.12/10 (previous run: 9.22/10, -0.10)

playatlas@MacBook-Pro-Rinat Assignment1 % pylint tictactoe.py
************* Module tictactoe
tictactoe.py:4:0: C0115: Missing class docstring (missing-class-docstring)
tictactoe.py:9:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:18:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:36:4: C0116: Missing function or method docstring (missing-function-docstring)
tictactoe.py:61:4: C0116: Missing function or method docstring (missing-function-docstring)

------------------------------------------------------------------
Your code has been rated at 9.26/10 (previous run: 9.12/10, +0.15)
